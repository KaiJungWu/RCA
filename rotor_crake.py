# -*- coding: utf-8 -*-
"""Rotor_crake.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UbsjkwYvlLaSK57CJn92iz-9dDgNwFoK
"""

import numpy as np
import pandas as pd
import tensorflow as tf
import matplotlib.pyplot as plt

tf.test.is_gpu_available()
print("Num GPUs Available: ", len(tf.config.list_physical_devices('GPU')))
#!nvidia-smi

!nvidia-smi

!jupyter notebook --NotebookApp.iopub_data_rate_limit=1.0e10

file_path = '/content/Lst202103291210-202103291349-ïNô«ÆÔÄ~âfü[â^èmöF_Saltend2GT.csv'

# Read the file in binary mode
with open(file_path, 'rb') as file:
    data_bytes = file.read()

# Decode the byte data using Shift_JIS

data_str = data_bytes.decode('Shift_JIS')

# Split the data by lines
lines = data_str.strip().split('\n')

# Find the index of the "GT2 TURB SPEED" row
index = next(i for i, line in enumerate(lines) if "GT2 TURB SPEED" in line)



# Clear the row before and the row after the answer index
lines[0,index-1] = ''
lines[index + 1] = ''

# Join the lines back together
output_data = '\n'.join(lines)

print(lines)

import pandas as pd
from io import StringIO

file_path = '/content/Lst202103291210-202103291349-ïNô«ÆÔÄ~âfü[â^èmöF_Saltend2GT.csv'

# Read the file in binary mode
with open(file_path, 'rb') as file:
    data_bytes = file.read()

# 1. Read the Shift_JIS encoded byte data and decode it into a string.
# Assuming data_bytes holds your byte data
data_str = data_bytes.decode('Shift_JIS')

# 2. Convert the string data into a Pandas DataFrame.
data_io = StringIO(data_str)
df = pd.read_csv(data_io, on_bad_lines='skip')

# 3. Locate the "GT2 TURB SPEED" row and use its index.

with open('/content/Lst202103291210-202103291349-ïNô«ÆÔÄ~âfü[â^èmöF_Saltend2GT.csv', 'rb') as f:
    data = f.read()



# Split the data by lines
lines = data.strip().split('\n')

# Find the index of the "GT2 TURB SPEED" row
index = next(i for i, line in enumerate(lines) if "GT2 TURB SPEED" in line)

# Clear the row before and the row after the answer index
lines[index - 1] = ''
lines[index + 1] = ''

# Join the lines back together
output_data = '\n'.join(lines)

print(output_data)



import pandas as pd
from io import StringIO

# Assuming data_bytes holds your byte data
data_str = data_bytes.decode('Shift_JIS')

# Convert the string data into a Pandas DataFrame, and skip bad lines.
data_io = StringIO(data_str)
try:
    df = pd.read_csv(data_io, error_bad_lines=False)
except Exception as e:
    print(f"Error reading the CSV: {e}")
    # You can add additional handling here if needed

# Locate the "GT2 TURB SPEED" row and use its index.
if "GT2 TURB SPEED" in df.values:
    answer_index = df[df.eq("GT2 TURB SPEED").any(1)].index[0]

    # Drop rows based on the answer index.
    df = df.drop(index=range(0, answer_index))
    df = df.drop(index=answer_index + 1)

# Print the resulting DataFrame.
print(df)



import pandas as pd

def clean_column_name(col_name):
    # Replace specific strings
    col_name = col_name.replace("n`", "Amplitude (OA)")

    # List of characters or strings to remove
    to_remove = ["", "@"]
    for char in to_remove:
        col_name = col_name.replace(char, '')

    return col_name

filename = '/content/Lst202103291210-202103291349-ïNô«ÆÔÄ~âfü[â^èmöF_Saltend2GT.csv'
df = pd.read_csv(filename, encoding='unicode_escape', skiprows=11)
df = df.drop(index=0)

# Rename the first column to 'timestamps'
df.columns = ['Timestamps'] + df.columns[1:].tolist()

# Use the function to clean each column name
df.columns = [clean_column_name(col) for col in df.columns]

print(df)

i want to do the same thing on each file under the folder,and each final result to be a csv file to store in the new folder call clean

!unzip Start-up_Shut-down_1sec.zip

!rm -rf /content/clean

import os
import pandas as pd

def clean_column_name(col_name):
    # Replace specific strings
    col_name = col_name.replace("n`", "Amplitude (OA)")

    # List of characters or strings to remove
    to_remove = ["", "@"]
    for char in to_remove:
        col_name = col_name.replace(char, '')

    return col_name

# Folder containing your original CSV files
source_folder = '/content/Start-up_Shut-down_1sec'
# Folder to save the cleaned CSV files
clean_folder = '/content/clean/'

# If the 'clean' folder doesn't exist, create it
if not os.path.exists(clean_folder):
    os.makedirs(clean_folder)

# Iterate over all files in the directory
for filename in os.listdir(source_folder):
    if filename.endswith('.csv'):
        filepath = os.path.join(source_folder, filename)
        df = pd.read_csv(filepath, encoding='unicode_escape', skiprows=11)
        df = df.drop(index=0)

        # Rename the first column to 'timestamps'
        df.columns = ['Timestamps'] + df.columns[1:].tolist()

        # Use the function to clean each column name
        df.columns = [clean_column_name(col) for col in df.columns]

        # Save cleaned dataframe to new CSV file in 'clean' folder
        clean_filepath = os.path.join(clean_folder, filename)
        df.to_csv(clean_filepath, index=False)

print("All files cleaned and saved to 'clean' folder.")

import os
import pandas as pd

def clean_column_name(col_name):
    # Replace specific strings
    col_name = col_name.replace("n`", "Amplitude (OA)")

    # List of characters or strings to remove
    to_remove = ["", "@"]
    for char in to_remove:
        col_name = col_name.replace(char, '')

    return col_name

def clean_filename(filename):
    # List of characters or strings to remove from filename
    chars_to_remove = ['Л', 'N', 'У', 'o', 'Т', 'т', 'О', '~', 'Г', 'f', 'Б', '[', 'Г', '^', 'К', 'm', 'Ф', 'F']
    for char in chars_to_remove:
        filename = filename.replace(char, '')
    return filename

# Folder containing your original CSV files
source_folder = '/content/Start-up_Shut-down_1sec'
# Folder to save the cleaned CSV files
clean_folder = '/content/clean/'

# If the 'clean' folder doesn't exist, create it
if not os.path.exists(clean_folder):
    os.makedirs(clean_folder)

# Iterate over all files in the directory
for filename in os.listdir(source_folder):
    if filename.endswith('.csv'):
        filepath = os.path.join(source_folder, filename)
        df = pd.read_csv(filepath, encoding='unicode_escape', skiprows=11)
        df = df.drop(index=0)

        # Rename the first column to 'timestamps'
        df.columns = ['Timestamps'] + df.columns[1:].tolist()

        # Use the function to clean each column name
        df.columns = [clean_column_name(col) for col in df.columns]

        # Get cleaned filename
        cleaned_filename = clean_filename(filename)

        # Save cleaned dataframe to new CSV file in 'clean' folder with cleaned filename
        clean_filepath = os.path.join(clean_folder, cleaned_filename)
        df.to_csv(clean_filepath, index=False)

print("All files cleaned and saved to 'clean' folder with cleaned filenames.")

!zip -r clean.zip clean/
from google.colab import files
files.download('clean.zip')

count = 0  # Initialize a counter
for filename in os.listdir(clean_folder):
    count += 1  # Increment the counter
    print(filename)
    if count==10:
        break  # Break out of the loop since we're interested only in the second file

amplitude = df['GT2 Brg1]XAmplitude']

for filename in os.listdir(clean_folder):


        # Print the contents of the file
        print(df)

        break  # Break out of the loop since we're interested only in the second file

import matplotlib.pyplot as plt
import numpy as np

# Sample amplitude and phase
amplitude = df['GT2 Brg1]XAmplitude']
phase = df['GT2 Brg1]XPhase']  # Converting degrees to radians

# Create a polar plot
fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
ax.plot(phase, amplitude, 'ro')  # 'ro' means red color, circle marker

# Setting title
ax.set_title("Polar plot of amplitude and phase", va='bottom')
plt.show()

import os
import matplotlib.pyplot as plt
import pandas as pd
files_to_plot=[]
for filename in os.listdir(clean_folder):
  if '202103' in filename:
    files_to_plot.append(filename)

print(files_to_plot)

import os

def get_files_from_month(folder, month_year):
    return [f for f in os.listdir(folder) if month_year in f]

# Usage
clean_folder = '/content/clean/'
month=['202103','202104','202105','202106','202107','202108']
for in month:
  files_to_plot = get_files_from_month(clean_folder, i )


print(files_to_plot)

total=0
for filename in os.listdir(clean_folder):
  filepath=os.path.join(clean_folder,filename)
  if filepath.endswith('.csv'):
    print(filepath)
    df=pd.read_csv(filepath,encoding='unicode_escape')
    amount=df.shape[0]
    total+=amount
print(total)

import os
import pandas as pd

def combine_csvs_from_folder(folder_path):
    # Get the list of all csv files in the folder
    csv_files = [f for f in os.listdir(folder_path) if f.endswith('.csv')]

    # Create an empty list to hold dataframes
    dfs = []

    # Read the first csv file to get the number of columns
    first_file_path = os.path.join(folder_path, csv_files[0])
    first_df = pd.read_csv(first_file_path, encoding='unicode_escape')
    num_columns = len(first_df.columns)
    dfs.append(first_df)

    # Read the rest of the csv files
    for file in csv_files[1:]:
        file_path = os.path.join(folder_path, file)
        df = pd.read_csv(file_path, encoding='unicode_escape')

        # Check if the number of columns matches the first CSV
        if len(df.columns) != num_columns:
            print(f"Error: {file} has a different number of columns!")
            continue
        dfs.append(df)

    # Concatenate all dataframes into a single dataframe
    combined_df = pd.concat(dfs, ignore_index=True)

    return combined_df

# Usage
folder_path = '/content/clean/'
result_df = combine_csvs_from_folder(folder_path)
print(result_df)







result_df

# Convert the Timestamps column to datetime format
result_df['Timestamps'] = pd.to_datetime(result_df['Timestamps'])
result_df.set_index('Timestamps', inplace=False)
print(result_df)
print(result_df.info())  # This will show the datatype of each column

print(result_df.columns)
#df.set_index('Timestamps', inplace=True)

# Extract month and group by it
grouped = result_df.groupby(result_df.index.month)

# Plot each group
for month, group in grouped:
    fig, ax1 = plt.subplots(figsize=(10,6))

    ax2 = ax1.twinx()
    ax3 = ax1.twinx()

    # Plotting GT2 TURB SPEED
    ax1.plot(group.index, group['GT2 TURB SPEED'], 'g-', label='GT2 TURB SPEED', marker='o')
    ax1.set_ylabel('GT2 TURB SPEED', color='g')

    # Plotting GT2 NO1 BRG ROTOR VIBRATION -X
    ax2.plot(group.index, group['GT2 NO1 BRG ROTOR VIBRATION -X'], 'b-', label='GT2 NO1 BRG ROTOR VIBRATION -X', marker='o')
    ax2.set_ylabel('GT2 NO1 BRG ROTOR VIBRATION -X', color='b')

    # Plotting GT2 NO1 BRG ROTOR VIBRATION -Y
    ax3.plot(group.index, group['GT2 NO1 BRG ROTOR VIBRATION -Y'], 'r-', label='GT2 NO1 BRG ROTOR VIBRATION -Y', marker='o')
    ax3.set_ylabel('GT2 NO1 BRG ROTOR VIBRATION -Y', color='r')

    ax3.spines['right'].set_position(('outward', 60))

    ax1.set_xlabel('Date')
    plt.title(f"Trends for Month {month}")

    plt.show()

start_indices = result_df.index[result_df['GT2 TURB SPEED'] == 0.015].tolist()
print(len(start_indices))

# Identify start and end points of each cycle
starts = result_df[result_df['GT2 TURB SPEED'] == 0.015].index

# Convert the start indices to a list for easier iteration
starts = list(starts)

# Group the starts in pairs as cycles
cycles = [(starts[i], starts[i+1]) for i in range(len(starts)-1)]

# Group cycles in sets of 10
grouped_cycles = [cycles[i:i+10] for i in range(0, len(cycles), 10)]

for group in grouped_cycles:
    plt.figure(figsize=(12, 6))

    for start, end in group:
        cycle_data = result_df.loc[start:end]
        plt.plot(cycle_data['Timestamps'], cycle_data['GT2 NO1 BRG ROTOR VIBRATION -X'], label=f'Cycle starting at {cycle_data["Timestamps"].iloc[0]} for Vibration -X')
        plt.plot(cycle_data['Timestamps'], cycle_data['GT2 TURB SPEED'], label=f'Cycle starting at {cycle_data["Timestamps"].iloc[0]} for Turb Speed')

    # Extract month from the first timestamp of the first cycle in the group for plot title
    month_str = cycle_data['Timestamps'].iloc[0].strftime('%Y-%m')
    plt.title(f"Data for {month_str}")
    plt.legend(loc='upper left', bbox_to_anchor=(1,1), ncol=1)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

    one plot have 10 cycle,and one line is 1 cycle data

print(grouped_cycles)



result_df.to_pickle('filename.pkl')

for i in range(1,10):

  a=f'/content/cycle_{i}.csv'
  !rm -rf a

